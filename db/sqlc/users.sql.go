// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  id,
  name,
  phone,
  image_url,
  status_text
) VALUES (
 $1, $2, $3,$4,$5
) RETURNING id, role, phone, name, image_url, status_text, is_blocked, blocked_reason, created_at
`

type CreateUserParams struct {
	ID         string `json:"id"`
	Name       string `json:"name"`
	Phone      string `json:"phone"`
	ImageUrl   string `json:"image_url"`
	StatusText string `json:"status_text"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Phone,
		arg.ImageUrl,
		arg.StatusText,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Phone,
		&i.Name,
		&i.ImageUrl,
		&i.StatusText,
		&i.IsBlocked,
		&i.BlockedReason,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, role, phone, name, image_url, status_text, is_blocked, blocked_reason, created_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Phone,
		&i.Name,
		&i.ImageUrl,
		&i.StatusText,
		&i.IsBlocked,
		&i.BlockedReason,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, role, phone, name, image_url, status_text, is_blocked, blocked_reason, created_at FROM users
WHERE phone = $1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Phone,
		&i.Name,
		&i.ImageUrl,
		&i.StatusText,
		&i.IsBlocked,
		&i.BlockedReason,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  role = COALESCE($1, role),
  name = COALESCE($2, name),
  phone = COALESCE($3, phone),
  image_url = COALESCE($4, image_url),
  status_text = COALESCE($5, status_text)
WHERE id = $6
RETURNING id, role, phone, name, image_url, status_text, is_blocked, blocked_reason, created_at
`

type UpdateUserParams struct {
	Role       pgtype.Text `json:"role"`
	Name       pgtype.Text `json:"name"`
	Phone      pgtype.Text `json:"phone"`
	ImageUrl   pgtype.Text `json:"image_url"`
	StatusText pgtype.Text `json:"status_text"`
	ID         string      `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Role,
		arg.Name,
		arg.Phone,
		arg.ImageUrl,
		arg.StatusText,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.Phone,
		&i.Name,
		&i.ImageUrl,
		&i.StatusText,
		&i.IsBlocked,
		&i.BlockedReason,
		&i.CreatedAt,
	)
	return i, err
}
